lst$j<-lst$j+1
merge(lst)
}
}
mergesort(x)
sort<-function(lst){
lst$x1<-lst$vector[1:floor(n/2)]
lst$x2<-lst$vector[ceiling(n/2):n]
n<-length(c(lst$x1, lst$x2))
if(n!=1) sort(lst)
merge(lst)
lst$new_vec
}
mergesort(x)
mergesort<-function(x){
#inicializar lista
lst<-list(
vector = x,
n = length(x)
x1 = numeric(),
x2 = numeric(),
i = 1,
j = 1,
new_vec = numeric()
)
#print_list(lst)
sort(lst)
}
mergesort<-function(x){
#inicializar lista
lst<-list(
vector = x,
n = length(x),
x1 = numeric(),
x2 = numeric(),
i = 1,
j = 1,
new_vec = numeric()
)
#print_list(lst)
sort(lst)
}
sort<-function(lst){
lst$x1<-lst$vector[1:floor(lst$n/2)]
lst$x2<-lst$vector[ceiling(lst$n/2):n]
lst$n<-length(c(lst$x1, lst$x2))
if(n!=1) sort(lst)
merge(lst)
lst$new_vec
}
mergesort(x)
lst<-list(
vector = x,
n = length(x),
x1 = numeric(),
x2 = numeric(),
i = 1,
j = 1,
new_vec = numeric()
)
lst
mergesort<-function(x){
#inicializar lista
lst<-list(
vector = x,
n = length(x),
x1 = numeric(),
x2 = numeric(),
i = 1,
j = 1,
new_vec = numeric()
)
#print_list(lst)
sort(lst)
}
sort<-function(lst){
lst$x1<-lst$vector[1:floor(lst$n/2)]
lst$x2<-lst$vector[ceiling(lst$n/2):n]
lst$n<-length(c(lst$x1, lst$x2))
if(n!=1) sort(lst)
merge(lst)
lst$new_vec
}
mergesort(x)
sort<-function(lst){
lst$x1<-lst$vector[1:floor(lst$n/2)]
lst$x2<-lst$vector[ceiling(lst$n/2):n]
lst$n<-length(c(lst$x1, lst$x2))
if(lst$n>2) sort(lst)
merge(lst)
lst$new_vec
}
sort(x)
lst$vector
lst$vector[1:2]
mergesort(x)
sort<-function(lst){
lst$x1<-lst$vector[1:floor(lst$n/2)]
lst$x2<-lst$vector[ceiling(lst$n/2):lst$n]
lst$n<-length(c(lst$x1, lst$x2))
if(lst$n>2) sort(lst)
merge(lst)
lst$new_vec
}
mergesort(x)
sort<-function(lst){
lst$x1<-lst$vector[1:floor(lst$n/2)]
lst$x2<-lst$vector[ceiling(lst$n/2):lst$n]
lst$n<-length(c(lst$x1, lst$x2))
if(lst$n>2) {sort(lst(lst$vector=lst$x1)); sort(lst(lst$vector =x2))}
merge(lst)
lst$new_vec
}
sort<-function(lst){
lst$x1<-lst$vector[1:floor(lst$n/2)]
lst$x2<-lst$vector[ceiling(lst$n/2):lst$n]
lst$n<-length(c(lst$x1, lst$x2))
if(lst$n>2) {sort(lst(lst$vector=lst$x1)); sort(lst(lst$vector =x2))}
merge(lst)
lst$new_vec
}
sort<-function(lst){
lst$x1<-lst$vector[1:floor(lst$n/2)]
lst$x2<-lst$vector[ceiling(lst$n/2):lst$n]
lst$n<-length(c(lst$x1, lst$x2))
if(lst$n>2) {sort(lst(lst$vector=lst$x1)); sort(lst(lst$vector =x2))}
merge(lst)
lst$new_vec
}
sort<-function(lst){
lst$x1<-lst$vector[1:floor(lst$n/2)]
lst$x2<-lst$vector[ceiling(lst$n/2):lst$n]
lst$n<-length(c(lst$x1, lst$x2))
if(lst$n>2) {lst$vector=lst$x1
sort(lst)
lst$vector=lst$x2
sort(lst)}
merge(lst)
lst$new_vec
}
mergesort(x)
sort<-function(lst){
lst$x1<-lst$vector[1:floor(lst$n/2)]
lst$x2<-lst$vector[ceiling(lst$n/2):lst$n]
if(lst$n>2) {lst$vector<-lst$x1
lst$n<-length(lst$vector)
sort(lst)
lst$vector<-lst$x2
lst$n<-length(lst$vector)
sort(lst)}
merge(lst)
lst$new_vec
}
mergesort(x)
sort<-function(lst){
lst$x1<-lst$vector[1:floor(lst$n/2)]
lst$x2<-lst$vector[ceiling(lst$n/2):lst$n]
if(lst$n>2) {lst$vector<-lst$x1
lst$n<-length(lst$vector)
print("sort list 1")
sort(lst)
lst$vector<-lst$x2
lst$n<-length(lst$vector)
print("sort list 2")
sort(lst)}
merge(lst)
lst$new_vec
}
mergesort(x)
x1<-numeric()
c(x1, x)
sort<-function(lst){
lst$x1<-lst$vector[1:floor(lst$n/2)]
lst$x2<-lst$vector[ceiling(lst$n/2):lst$n]
if(lst$n>1) {lst$vector<-lst$x1
lst$n<-length(lst$vector)
print("sort list 1")
sort(lst)
lst$vector<-lst$x2
lst$n<-length(lst$vector)
print("sort list 2")
sort(lst)}
merge(lst)
lst$new_vec
}
merge<-function(lst){
if(lst$i>length(lst$x1)){
lst$new_vec<-c(lst$new_vec, lst$x2[j:length(lst$x2)])
print("lst$new_vec")
print(lst$new_vec)
return(lst)
}
else if(lst$j>length(lst$x2)){
lst$new_vec<-c(lst$new_vec, lst$x1[i:length(lst$x1)])
print("lst$new_vec")
print(lst$new_vec)
return(lst)
}
else if(lst$x1[lst$i]<lst$x2[lst$j]){
lst$new_vec<-c(lst$new_vec, x1[lst$i])
lst$i<-lst$i+1
print("lst$new_vec")
print(lst$new_vec)
merge(lst)
}
else if(lst$x2[lst$j]<lst$x1[lst$i]){
lst$new_vec<-c(lst$new_vec, x2[lst$j])
lst$j<-lst$j+1
print("lst$new_vec")
print(lst$new_vec)
merge(lst)
}
}
mergesort(x)
sort<-function(lst){
lst$x1<-lst$vector[1:floor(lst$n/2)]
lst$x2<-lst$vector[(floor(lst$n/2)+1):lst$n]
if(lst$n>1) {lst$vector<-lst$x1
lst$n<-length(lst$vector)
print("sort list 1")
sort(lst)
lst$vector<-lst$x2
lst$n<-length(lst$vector)
print("sort list 2")
sort(lst)}
merge(lst)
lst$new_vec
}
mergesort(x)
x
sort<-function(lst){
lst$x1<-lst$vector[1:floor(lst$n/2)]
lst$x2<-lst$vector[(floor(lst$n/2)+1):lst$n]
if(lst$n>1) {lst$vector<-lst$x1
lst$n<-length(lst$vector)
print("sort list 1")
sort(lst)
lst$vector<-lst$x2
lst$n<-length(lst$vector)
print("sort list 2")
sort(lst)}
#merge subroutine
for(i in lst$x1)
for(j in lst$x2){
if(lst$x1[lst$i]<lst$x2[lst$j])
lst$new_vec<-c(lst$new_vec, x1[lst$i])
else if(lst$x2[lst$j]<lst$x1[lst$i])
lst$new_vec<-c(lst$new_vec, x2[lst$j])
else if(lst$i>length(x1))
lst$new_vec<-c(lst$new_vec, lst$x2[j:length(lst$x2)])
else if(lst$j>length(x2))
lst$new_vec<-c(lst$new_vec, lst$x1[i:length(lst$x1)])
else return(lst$new_vec)
}
lst$new_vec
}
mergesort<-function(x){
#inicializar lista
lst<-list(
vector = x,
n = length(x),
x1 = numeric(),
x2 = numeric(),
i = 1,
j = 1,
new_vec = numeric()
)
#print_list(lst)
sort(lst)
}
5<-c(5,4,6,1)
x<-c(5,4,6,1)
mergesort(x)
sort<-function(lst){
lst$x1<-lst$vector[1:floor(lst$n/2)]
lst$x2<-lst$vector[(floor(lst$n/2)+1):lst$n]
if(lst$n>1) {lst$vector<-lst$x1
lst$n<-length(lst$vector)
print("sort list 1")
sort(lst)
lst$vector<-lst$x2
lst$n<-length(lst$vector)
print("sort list 2")
sort(lst)}
#merge subroutine
for(i in lst$x1)
for(j in lst$x2){
if(lst$x1[lst$i]<lst$x2[lst$j])
lst$new_vec<-c(lst$new_vec, lst$x1[lst$i])
else if(lst$x2[lst$j]<lst$x1[lst$i])
lst$new_vec<-c(lst$new_vec, lst$x2[lst$j])
else if(lst$i>length(x1))
lst$new_vec<-c(lst$new_vec, lst$x2[j:length(lst$x2)])
else if(lst$j>length(x2))
lst$new_vec<-c(lst$new_vec, lst$x1[i:length(lst$x1)])
else return(lst$new_vec)
}
lst$new_vec
}
mergesort(x)
sort<-function(lst){
lst$x1<-lst$vector[1:floor(lst$n/2)]
lst$x2<-lst$vector[(floor(lst$n/2)+1):lst$n]
if(lst$n>1) {lst$vector<-lst$x1
lst$n<-length(lst$vector)
print("sort list 1")
sort(lst)
lst$vector<-lst$x2
lst$n<-length(lst$vector)
print("sort list 2")
sort(lst)}
#merge subroutine
for(i in lst$x1)
for(j in lst$x2){
if(lst$x1[lst$i]<lst$x2[lst$j])
lst$new_vec<-c(lst$new_vec, lst$x1[lst$i])
else if(lst$x2[lst$j]<lst$x1[lst$i])
lst$new_vec<-c(lst$new_vec, lst$x2[lst$j])
else if(lst$i>length(lst$x1))
lst$new_vec<-c(lst$new_vec, lst$x2[j:length(lst$x2)])
else if(lst$j>length(lst$x2))
lst$new_vec<-c(lst$new_vec, lst$x1[i:length(lst$x1)])
else return(lst$new_vec)
}
lst$new_vec
}
mergesort(x)
x
0.9^50
1-0.9^50
setwd("~/MachLearn//W3//Project")
if(!file.exists("./data")) dir.create("./data")
setwd("~/MachLearn/W3/Project")
training<-read.csv("./data/pml-training.csv", header = T, stringsAsFactors = F, na.strings = c("", "#DIV/0!"))
testing<-read.csv("./data/pml-testing.csv", header = T, stringsAsFactors = F)
library(caret)
set.seed(52147)
training$classe<-as.factor(training$classe)
inValidation<-createDataPartition(y=training$classe, p = 0.4, list = F)
validation<-training[inValidation, ]
training<-training[-inValidation, ]
training<-training[, -(1:6)] #los Ã­ndices, nombres... menos el num_window
training[1:(dim(training)[2]-1)]<-sapply(training[1:(dim(training)[2]-1)], function(x) as.numeric(x))
training<-training[, colSums(is.na(training))== 0]
class(training$classe)
prep<-preProcess(training[,1:(dim(training)[2]-1)], method = c("scale", "center"))
vars
vars<-sapply(training, var)
vars
prep<-preProcess(training[,1:(dim(training)[2]-1)], method = c("scale", "center"))
vars<-sapply(training, var)
vars
barplot(vars)
abline(h = 10000)
abline(h = 15000, col = "red")
vars<-sapply(prep, var)
prep<-predict(prep, training[, 1:dim(training)[2]-1])
vars<-sapply(prep, var)
vars
head(prep)
barplot(prep, var)
barplot(prep)
barplot(vars)
prep<-preProcess(training[,1:(dim(training)[2]-1)], method = c("scale", "center"))
str(prep)
?preProcess
prep<-predict(prep, training[, 1:dim(training)[2]-1])
sapply(prep, mean)
vars<-sapply(training, var)
vars*mean(vars)/sd(vars)
?nearZeroVar
nzv(training[, 1:(dim(training)[2]-1)])
nzv(training[, 1:5])
nearZeroVar(training[, 1:(dim(training)[2]-1)])
pairs(training[, 1:5], col = training$classe)
pairs(training[, 6:10], col = training$classe)
pairs(training[, 6:10], col = training$classe, alpha = 0.3)
pairs(training[, 16:20], col = training$classe, alpha = 0.3)
pairs(training[, 16:20], col = training$classe)
pairs(training[, 21:25], col = training$classe)
pairs(training[, 26:30], col = training$classe)
pairs(training[, 31:35], col = training$classe)
pairs(training[, 36:40], col = training$classe)
pairs(training[,41:45], col = training$classe)
pairs(training[,46:50], col = training$classe)
dim(training)
pairs(training[,51:53], col = training$classe)
names(training)
predictors1<-c("pitch_arm", "yaw_arm", "total_accel_arm", "roll_dumbbell", "pitch_dumbbell", "yaw_dumbbell", "accel_dumbbell_x", "accel_dumbbell_y", "magnet_dumbbell_x", "magnet_dumbbell_z", "roll_forearm", "pitch_forearm")
model<-predict(training$classe ~training[, names(training)%in% predictors1], method = "nb")
train1<-subset(training, select = c(names(training) %in% predictors1, classe))
names(train1)
predictors1
head(train1)
names(training)
train1<-subset(training, select = c(training[names(training) %in% predictors1], classe))
train1<-subset(training, select = c(training[, names(training) %in% predictors1], classe))
train1<-training[, c(names(training) %in% predictors1, classe)]
train1<-training[, c(names(training) %in% predictors1, training$classe)]
names(train1)
dim(train1)
train1<-subset(training, select =names %in% predictors1]
train1<-subset(training, select =names %in% predictors1)
train1<-subset(training, select =names(training) %in% predictors1)
dim(train1)
names(train1)
train1<-cbind(train1, training$classe)
names(train1)
train1<-subset(training, select =names(training) %in% predictors1)
train1$classe<-training$classe)
train1$classe<-training$classe
ls
ls()
model<-predict(classe ~., method = "nb", trControl = trainControl(method = "cv"), data = train1)
?nb
library(e1071)
?nb
?NB
?nB
?naiveBayes
model<-predict(classe ~., method = "naiveBayes", trControl = trainControl(method = "cv"), data = train1)
model<-train(classe ~., method = "naiveBayes", trControl = trainControl(method = "cv"), data = train1)
model<-train(classe ~., method = "nb", trControl = trainControl(method = "cv"), data = train1)
warnings()
pred<-predict(model, newdata = validation)
mean(pred == validation$classe)
?rf
?randomForest
set.seed(255)
randomF<-train(classe ~., method = "rf", trControl = trainControl(method ="cv"), data = train1)
pred<-predict(randomF, newdata = validation)
mean(pred == validation$classe)
confusionMatrix(pred, validation$classe)
bagLDA<-train(classe ~., method = "bag", B = 10, bagControl = bagControl(
fit = ldaBag$fit,
predict = ldaBag$pred,
aggregate = ldaBag$aggregate),
data = train1)
pred2<-predict(bagLDA, newdata = validation)
mean(pred2 == validation$classe)
pred2<-predict(bagLDA$aggregate, newdata = validation)
confusionMatrix(pred2, validation$classe)
modelBoost<-train(classe ~., method = "gbm", trControl = trainControl(method = "cv"), data = train1, verbose = F)
modelBoost$finalModel
pred3<-predict(modelBoost, newdata = validation)
confusionMatrix(pred3, validation$classe)
?svm
modelSVM<-train(classe ~., method ="svm", trControl = trainControl(method = "cv"), data = train1)
?svmLinear
modelSVM<-train(classe ~., method ="svmLinear", trControl = trainControl(method = "cv"), data = train1)
pred4<-predict(modelSVM, newdata = validation)
confusionMatrix(pred4, validation$classe)
set.seed(255)
rrandomF<-train(classe ~., method = "rf",
trControl = trainControl(
method ="repeatedcv",
repeats = 10),
data = train1)
pred5<-predict(rrandomF, newdata = validation)
mean(pred == validation$classe) #0.948
confusionMatrix(pred, validation$classe)
mean(pred5 == validation$classe) #0.948
confusionMatrix(pred5, validation$classe)
confusionMatrix(pred, validation$classe)
confusionMatrix(pred5, validation$classe)
trainerror<-subset(train, train$classe != "A")
trainerror<-subset(training, training$classe != "A")
dim(trainerror)
tapply(training, classe, count)
tapply(training, training$classe, count)
tapply(training, training$classe, length)
?tapply
library(dplyr)
training %>% group_by(classe) %>% summarise(total = n())
pairs(trainerror[, 1:5], col = trainerror$classe)
pairs(trainerror[, 6:10], col = trainerror$classe)
pairs(trainerror[, 11:15], col = trainerror$classe)
predictors2<-append(predictors1, "roll_arm")
predictors2
pairs(trainerror[, 16:20], col = trainerror$classe)
pairs(trainerror[, 21:25], col = trainerror$classe)
pairs(trainerror[, 26:30], col = trainerror$classe)
pairs(trainerror[, 31:35], col = trainerror$classe)
pairs(trainerror[, 36:40], col = trainerror$classe)
pairs(trainerror[,41:45], col = trainerror$classe)
pairs(trainerror[,46:50], col = trainerror$classe)
pairs(trainerror[,51:53], col = trainerror$classe)
predictors2<-append(predictors1, c("roll_arm", "magnet_forearm_z"))
randomFF<-train(classe ~., method = "rf", trControl = trainControl(method ="cv"), data = train1)
pred6<-predict(randomFF, newdata = validation)
set.seed(255)
randomFF<-train(classe ~., method = "rf", trControl = trainControl(method ="cv"), data = train1)
pred6<-predict(randomFF, newdata = validation)
mean(pred6 == validation$classe) #0.948
confusionMatrix(pred6, validation$classe)
answers<-predict(randomFF, newdata = testing)
if(!file.exists("./solutions")) dir.create("./solutions")
setwd("./solutions")
pml_write_files = function(x){
n = length(x)
for(i in 1:n){
filename = paste0("problem_id_",i,".txt")
write.table(x[i],file=filename,quote=FALSE,row.names=FALSE,col.names=FALSE)
}
}
answers
pml_write_files(answers)
predictors
predictors1
system.time(randomFF<-train(classe ~., method = "rf", trControl = trainControl(method ="cv"), data = train1))
system.time(train(classe ~., method = "rf", trControl = trainControl(method ="cv"), data = train1))
?system.time
